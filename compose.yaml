version: '3'

networks:
  productDisplayTrainingProgram_network:

services:
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    container_name: ${APP_NAME}-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - ${DATABASE_VOLUME}
    networks:
      - ${NETWORK_NAME}

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME}-app
    environment:
      - APP_ENV=${APP_ENV}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - database
    networks:
      - ${NETWORK_NAME}

  nginx:
    image: nginx:alpine
    container_name: ${APP_NAME}-nginx
    ports:
      - "${NGINX_HOST_PORT}:80"
    volumes:
      - ${NGINX_VOLUME}
    depends_on:
      - app
    networks:
      - ${NETWORK_NAME}

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready -U ${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  database_data:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
